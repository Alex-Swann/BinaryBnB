/**
 * Rethink ODM
 */

/**
 * Module dependencies
 */

var log         = require('debug')('rethink');
var Model       = require('./model');
var Schema      = require('./schema');
var Types       = require('./types');
var Populate    = require('./plugins/populate');
var Timestamps  = require('./plugins/timestamps');

/**
 * Helpers
 */

function noop() {}

/**
 * Constructor
 */

function Rethink(config) {
  if (!(this instanceof Rethink)) {
    return new Rethink(config);
  }
  
  this._config = config || {};
  this._models = {};
  this._before = { buildSchema: [] };
  this._after = { buildModel: [] };
  this._adapter = new config.adapter();
}

/**
 * Connect to database
 * 
 * @param {String} url
 * @param {Object} options, optional connection options
 * @return {Rethink} self
 */

Rethink.prototype.connect = function(url, options) {
  if (typeof options === 'function') {
    cb = options;
    options = {};
  }
  
  if (typeof options === 'string') {
    options = { db: options }
  }
  
  if (!options) options = {};
  options.url = url;
  
  this._adapter.connect(options);
  
  return this;
}

/**
 * Create a new schema
 *
 * @param {Object} schema
 * @param {Object} options, optional schema options
 */

Rethink.prototype.schema = function(schema, options) {
  return new Schema(schema, options);
}

/**
 * Get/create a new model
 *
 * @param {String} name, model name
 * @param {Schema} schema
 */

Rethink.prototype.model = function(name, schema) {
  if (!schema) {
    return this._models[name];
  }
  
  this._before.buildSchema.forEach(function(fn) { 
    fn(schema);
  });
  
  var model = new Model(name, schema, this._adapter);
  
  if (this._models[name]) {
    throw new Error('model is already defined');
  }
  
  this._after.buildModel.forEach(function(fn) {
    fn(model);
  });
  
  this._models[name] = model;
  return model;
}

/**
 * Use ODM-wide plugins
 *
 * @param {Function} plugin(rethink, options)
 * @return {Rethink} self
 */

Rethink.prototype.use = function(plugin, options) {
  plugin(this, options);
  return this;
}

/**
 * Before hooks
 * 
 * @param {String} hook, eg. 'buildSchema'
 * @param {Function} fn(schema)
 * @return {Rethink} self
 */

Rethink.prototype.before = function(hook, fn) {
  this._before[hook].push(fn);
  return this;
}

/**
 * After hooks
 * 
 * @param {String} hook, eg. 'buildModel'
 * @param {Function} fn(schema)
 * @return {Rethink} self
 */

Rethink.prototype.after = function(hook, fn) {
  this._after[hook].push(fn);
  return this;
}

/**
 * Types
 */

Rethink.prototype.types = Types;

/**
 * Schema
 */

Rethink.prototype.Schema = Schema;

/**
 * Statics
 */

Rethink.Schema  = Schema;
Rethink.Types   = Types;
Rethink.Model   = Model;

/**
 * Plugins
 */

Rethink.Plugins = {
  Populate:   Populate,
  Timestamps: Timestamps 
}

/**
 * Expose
 */

exports = module.exports = Rethink;