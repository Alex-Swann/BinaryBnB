/**
 * Rethink schema
 */

/**
 * Module dependencies
 */

var Types = require('./types');

/**
 * Constructor
 * 
 * @param {Object} fields
 * @param {Object} options, optional
 */

function Schema(fields, options) {
  if (!(this instanceof Schema)) {
    return new Schema(fields, options);
  }
  
  this._fields = fields;
  this._options = options || {};
  
  this._before = {
    validate: [],
    create: [],
    update: [],
    remove: [],
    save: [],
    query: []
  }
  
  this._after = {
    validate: [],
    create: [],
    update: [],
    remove: [],
    save: [],
    query: []
  }
  
  this._schema = {};
  this.statics = {};
}

/**
 * Use plugins
 *
 * @param {Function} plugin(schema)
 * @param {Object} options, optional plugin options
 * @return {Schema} self
 */

Schema.prototype.use = function(plugin, options) {
  plugin(this, options);
  return this;
}

/**
 * Before hook
 *
 * @param {String} action, ["validate", "create", "update", "remove", "save", "query"]
 * @param {Function} fn(object, done)
 * @return {Schema} self
 */

Schema.prototype.before = function(action, fn) {
  if (!this._before[action]) {
    throw new Error(action + ' is not a supported hook');
  }
  this._before[action].push(fn);
  return this;
}

/**
 * After hook
 *
 * @param {String} action, ["validate", "create", "update", "remove", "save", "query"]
 * @param {Function} fn(object, done)
 * @return {Schema} self
 */

Schema.prototype.after = function(action, fn) {
  if (!this._after[action]) {
    throw new Error(action + ' is not a supported hook');
  }
  this._after[action].push(fn);
  return this;
}

/**
 * Build
 * Generate fields from schema; Get options and defaults
 *
 * @api private
 */

Schema.prototype._build = function() {
  var indexes = {};
  var fields = { /* id: Types.string().optional() */ };
  var defaults = {};
  
  Object.keys(this._fields).forEach(function(name) {
    var field = this._fields[name];
    if (field.virtual) return; // skip creation of virtual fields
    if (Array.isArray(field._queue)) { // node-veee validator
      fields[name] = field;
    } else { // { type: node-veee validator, default: '...', index: true/false || { expression: '...', options: { multi: true, geo: true }} }
      indexes[name] = fields[name];
      fields[name] = field.type;
      defaults[name] = field.default;
    }
  }.bind(this));
  
  return {
    indexes: indexes,
    defaults: defaults,
    validation: Types.object().keys(fields),
    beforeHooks: this._before,
    afterHooks: this._after,
    options: this._options,
    statics: this.statics,
    fields: this._fields
  };
}

/**
 * Schema Types
 */

Schema.prototype.types = Types;

/**
 * Expose
 */

exports = module.exports = Schema;