/**
 * RethinkDB adapter
 */

/**
 * Module dependencies
 */

var r         = require('rethinkdb');
var reconnect = require('reconnect-rethinkdb');
var Table     = require('./table');

function noop() {}

/**
 * Constructor
 */

function Adapter() {
  this._connection = null;
  this._queue = [];
}

/**
 * Connect
 */

Adapter.prototype.connect = function(options) {
  var self = this;
  var opts = { 
    host: options.url.split(':')[0], 
    port: parseInt(options.url.split(':')[1])
  }
  
  reconnect(r, opts)
  .on('connect', function(connection) {
    self._connection = connection;
    connection.use(options.db || 'db1');
    (function next() {
      var fn = self._queue.shift();
      if (fn) return fn(connection, next);
    })();
  })
  .on('disconnect', function(err) {
    self._connection = null;
  })
  .connect();
}

/**
 * Exec
 */

Adapter.prototype.exec = function(fn) {
  if (!this._connection || this._queue.length) {
    this._queue.push(fn);
  } else {
    fn(this._connection, noop);
  }
}

Adapter.prototype.ensureTable = function(tableName, schema) {
  Table(tableName, schema, this.exec.bind(this));
}

Adapter.prototype.find = function(tableName, query, options, cb) {
  this.exec(function(connection, done) {
    var exp = r.table(tableName).filter(query);
    if (options.order) exp = exp.orderBy(options.order);
    if (typeof options.limit === 'number') exp = exp.limit(options.limit);
    if (typeof options.skip === 'number') exp = exp.skip(options.skip);
    exp.run(connection, function(err, cursor) {
      if (err) return cb(err);
      done();
      cursor.toArray(cb);
    });
  });
}

Adapter.prototype.create = function(tableName, object, cb) {
  this.exec(function(connection, done) {
    r.table(tableName).insert(object, {
      durability: 'hard', // self.schema.options.durability ||
      returnChanges: true
    }).run(connection, function(err, result) {
      if (err) return cb(err);
      if (result.inserted !== 1) return cb(result);
      done();
      cb(null, result.changes[0].new_val);
    });
  });
}

Adapter.prototype.update = function(tableName, object, cb) {
  this.exec(function(connection, done) {
    r.table(tableName).update(object, {
      durability: 'hard', // self.schema.options.durability || 
      returnChanges: true,
      nonAtomic: false
    }).run(connection, function(err, result) {
      if (err) return cb(err);
      if (result.replaced !== 1) return cb(result);
      done();
      cb(null, result.changes[0].new_val);
    });
  });
}

Adapter.prototype.remove = function(tableName, id, cb) {
  this.exec(function(connection, done) {
    r.table(tableName).get(id).delete({
      durability: 'hard' // self.schema.options.durability || 
    }).run(connection, function(err, result) {
      if (err) return cb(err);
      if (result.deleted !== 1) return cb(result);
      done();
      cb();
    });
  });
}

Adapter.prototype.populate = function(tableName, ids, query, options, cb) {
  var table = r.table(tableName);
  var exp = table.getAll(r.args(ids), { index: options.refField });
  if (options.query) exp = exp.filter(options.query);
  if (options.options.limit) exp = exp.limit(options.options.limit);
  if (options.options.order) exp = exp.orderBy(options.options.order);
  if (options.options.skip) exp = exp.skip(options.options.skip);
  this.exec(function(connection, done) {
    exp.run(connection, function(err, cursor) {
      if (err) return cb(err);
      cursor.toArray(function(err, results) {
        if (err) return cb(err);
        done();
        cb(null, results);
      });
    });
  });
}

exports = module.exports = Adapter;