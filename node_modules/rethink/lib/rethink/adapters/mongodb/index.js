/**
 * Mongodb adapter
 */

/**
 * Module dependencies
 */

var r         = require('rethinkdb');
var reconnect = require('reconnect-rethinkdb');
var Table     = require('./table');
var Mongo     = require('mongodb').MongoClient;
var Server    = require('mongodb').Server;

/**
 * Helpers
 */

function noop() {}

/**
 * Constructor
 */

function Adapter() {
  if (!(this instanceof Adapter)) {
    return new Adapter();
  }
  
  this._connection = null;
  this._queue = [];
}

/**
 * Connect
 *
 * @param {Object} options
 *   @param {String} url
 *   @params {String} database, optional
 * @return {Adapter} self
 */

Adapter.prototype.connect = function(options) {
  var self = this;
  var opts = {
    host: options.url.split(':')[0],
    port: parseInt(options.url.split(':')[1])
  }
  
  var server = new Server(opts.host, opts.port);
  var client = new Mongo(opts.url);
  
  client.open(function(err, mongoClient) {
    var db = client.db(options.db || "db1");
    self._connection = db;
    (function next() {
      var fn = self._queue.shift();
      if (fn) return fn(db, next);
    })();
  });
  
  return this;
}

/**
 * Queue command or execute immediately
 *
 * @param {Function} fn(connection, done)
 * @return {Adapter} self
 */

Adapter.prototype.exec = function(fn) {
  if (!this._connection || this._queue.length) {
    this._queue.push(fn);
  } else {
    fn(this._connection, noop);
  }
  return this;
}

/**
 * Ensure table is created and indexes are built (not implemented for mongodb)
 *
 * @param {String} tableName
 * @param {Schema} schema
 * @return {Adapter} self
 */

Adapter.prototype.ensureTable = function(tableName, schema) {
  // Table(tableName, schema, this.exec.bind(this));
  console.log('Ensure table is not implemented');
  return this;
}

/**
 * Find record in mongodb
 *
 * @param {String} tableName
 * @param {Object} query, mongodb query
 * @param {Object} options, optional
 *   @param {String} order 
 *   @param {Number} skip
 *   @param {Number} limit
 * @param {Function} cb(err, results)
 */

Adapter.prototype.find = function(tableName, query, options, cb) {
  this.exec(function(conn, done) {
    var exp = conn.collection(tableName).find(query);
    // TODO: if (options.order) exp = exp.orderBy(options.order);
    if (typeof options.limit === 'number') exp = exp.limit(options.limit);
    if (typeof options.skip === 'number') exp = exp.skip(options.skip);
    exp.exec(function(err, results) {
      if (err) return cb(err);
      done();
      cb(null, results);
    });
  });
}

/**
 * Create record in mongodb
 *
 * @param {String} tableName
 * @param {Object} object, params
 * @param {Object} options, optional
 *   @param {String} order 
 *   @param {Number} skip
 *   @param {Number} limit
 * @param {Function} cb(err, record)
 */

Adapter.prototype.create = function(tableName, object, cb) {
  this.exec(function(conn, done) {
    conn.collection(tableName)
      .insert(object)
      .exec(function(err, result) {
        if (err) return cb(err);
        done();
        cb(null, result);
      });
  });
}

/**
 * Update a mognodb record
 * 
 * @param {String} tableName
 * @param {Object} object
 *   @param {String} _id, objectId
 *   ...
 * @param {Function} cb(err, record)
 */

Adapter.prototype.update = function(tableName, object, cb) {
  this.exec(function(conn, done) {
    var id = object._id;
    delete object._id;
    conn.collection(tableName)
      .update({ _id: id }, { $set: object })
      .exec(function(err, result) {
        if (err) return cb(err);
        done();
        cb(null, result);
      });
  });
}

/**
 * Remove mongodb record
 *
 * @param {String} tableName
 * @param {String} id, objectId
 * @param {Function} callback(err)
 */

Adapter.prototype.remove = function(tableName, id, cb) {
  this.exec(function(conn, done) {
    conn.remove({ _id: id }).exec(function(err) {
      if (err) return cb(err);
      done();
      cb();
    });
  });
}

/**
 * Populate a set of records, using model herlers and ids
 *
 * @param {}
Adapter.prototype.populate = function(tableName, ids, query, options, cb) {
  this.exec(function(conn, done) {
    var collection = conn.collection(tableName);
    var params = {};
    params[options.refFeild] = { $in: ids };
    var exp = collection.find(params);
    if (options.query) exp = exp.where(options.query);
    // TODO: if (options.options.order) exp = exp.orderBy(options.options.order);
    if (options.options.limit) exp = exp.limit(options.options.limit);
    if (options.options.skip) exp = exp.skip(options.options.skip);
    
    exp.exec(function(err, results) {
      if (err) return cb(err);
      done();
      cb(null, results);
    });
  });
}

exports = module.exports = Adapter;