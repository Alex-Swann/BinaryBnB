var Rethink = require('../');
var should = require('chai').should();

var DB = process.env.DB_HOST || 'localhost:28015';

describe('rethink', function() {
  
  describe('Rethink', function() {
    
    describe('#constructor', function() {
      it('should create an instance of Rethink', function() {
        (new Rethink).should.be.instanceof(Rethink);
        Rethink().should.be.instanceof(Rethink);
      });
      
      it('should accept a config', function() {
        var r = new Rethink({ option: 'value' });
        r._config.should.deep.equal({ option: 'value' });
      });
    });
    
    describe('#schema', function() {
      it('should create a schema', function() {
        Rethink().schema({}).should.be.instanceof(Rethink.Schema);
      });
    });
    
    describe('#model', function() {
      it('should create a model', function() {
        var r = new Rethink();
        var schema = new Rethink.Schema({});
        r.model('User', schema).should.be.instanceof(Rethink.Model);
      });
    });
    
    describe('#connect', function() {
      it('should connect to a database', function(done) {
        var r = new Rethink();
        r.connect(process.env.DB_HOST, done);
      });
      
      it('should connect to a database using options', function(done) {
        var r = new Rethink();
        r.connect(process.env.DB_HOST, { db: 'test' }, done);
      });
    });
    
    describe('#use', function() {
      it('should use plugins', function() {
        var r = new Rethink();
        r.use(function plugin(rethink) {
          r.should.equal(rethink);
        });
      });
      
      it('should use plugins with options', function() {
        var r = new Rethink();
        r.use(function plugin(rethink, opts) {
          r.should.equal(rethink);
          opts.should.deep.equal({ option: 'value' });
        }, { option: 'value' });
      });
    });
    
    describe('#before', function() {
      it('should add a new before hook', function(done) {
        var r = new Rethink();
        r.before('buildSchema', function(schema) {
          schema.should.be.instanceof(Rethink.Schema);
          done();
        });
        r.schema({});
      });
    });
    
    describe('#after', function() {
      it('should add an after hook', function(done) {
        var r = new Rethink();
        r.after('buildModel', function(model) {
          model.should.be.instanceof(Rethink.Model);
          done();
        });
        r.model('Test', r.schema({}));
      });
    });
    
    describe('#types', function() {
      it('should expose schema validation types', function() {
        var r = new Rethink();
        r.types.should.deep.equal(Rethink.Types);
      });
    });
    
    describe('#Schema', function() {
      it('should expose schema constructor', function() {
        var r = new Rethink();
        r.Schema.should.deep.equal(Rethink.Schema);
      });
    });
    
    describe('Static properties', function() {
      it('should expose schema constructor', function() {
        Rethink.Schema.should.be.a('function');
      });
      
      it('should expose model constructor', function() {
        Rethink.Model.should.be.a('function');
      });
      
      it('should expose validation types', function() {
        Rethink.Types.should.be.an('object');
      });
      
      describe('Plugins', function() {
        it('should expose population plugin', function() {
          Rethink.Plugins.Populate.should.be.a('function');
        });
        
        it('should expose timestamps plugin', function() {
          Rethink.Plugins.Timestamps.should.be.a('function');
        });
      })
    });
  });
  
});
